// <auto-generated />
using CompareMotos.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompareMotos.Migrations
{
    [DbContext(typeof(CompareMotosContext))]
    [Migration("20190710230653_brand")]
    partial class brand
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompareMotos.Models.AmountGear", b =>
                {
                    b.Property<int>("AmountGearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.HasKey("AmountGearId");

                    b.ToTable("AmountGear");
                });

            modelBuilder.Entity("CompareMotos.Models.BackBrake", b =>
                {
                    b.Property<int>("BackBrakeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BackBrakeeId");

                    b.ToTable("BackBrake");
                });

            modelBuilder.Entity("CompareMotos.Models.Battery", b =>
                {
                    b.Property<int>("BatteryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BatteryId");

                    b.ToTable("Battery");
                });

            modelBuilder.Entity("CompareMotos.Models.Brake", b =>
                {
                    b.Property<int>("BrakeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackBrakeeId");

                    b.Property<int>("FrontBrakeId");

                    b.HasKey("BrakeId");

                    b.HasIndex("BackBrakeeId");

                    b.HasIndex("FrontBrakeId");

                    b.ToTable("Brake");
                });

            modelBuilder.Entity("CompareMotos.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CompareMotos.Models.Cooling", b =>
                {
                    b.Property<int>("CoolingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CoolingId");

                    b.ToTable("Cooling");
                });

            modelBuilder.Entity("CompareMotos.Models.Cylinder", b =>
                {
                    b.Property<int>("CylinderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name");

                    b.HasKey("CylinderId");

                    b.ToTable("Cylinder");
                });

            modelBuilder.Entity("CompareMotos.Models.Dimensions", b =>
                {
                    b.Property<int>("DimensionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Height");

                    b.Property<double>("Length");

                    b.Property<double>("Weight");

                    b.Property<double>("Width");

                    b.HasKey("DimensionsId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("CompareMotos.Models.Displacement", b =>
                {
                    b.Property<int>("DisplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name");

                    b.HasKey("DisplacementId");

                    b.ToTable("Displacement");
                });

            modelBuilder.Entity("CompareMotos.Models.Electric", b =>
                {
                    b.Property<int>("ElectricId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatteryId");

                    b.Property<int>("IgnitionId");

                    b.Property<int>("StartId");

                    b.HasKey("ElectricId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("IgnitionId");

                    b.HasIndex("StartId");

                    b.ToTable("Electric");
                });

            modelBuilder.Entity("CompareMotos.Models.Engine", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoolingId");

                    b.Property<int>("CylinderId");

                    b.Property<int>("DisplacementId");

                    b.Property<int>("TimeCycleId");

                    b.HasKey("EngineId");

                    b.HasIndex("CoolingId");

                    b.HasIndex("CylinderId");

                    b.HasIndex("DisplacementId");

                    b.HasIndex("TimeCycleId");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("CompareMotos.Models.Feeding", b =>
                {
                    b.Property<int>("FeedingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("FeedingId");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("CompareMotos.Models.FrontBrake", b =>
                {
                    b.Property<int>("FrontBrakeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("FrontBrakeId");

                    b.ToTable("FrontBrake");
                });

            modelBuilder.Entity("CompareMotos.Models.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Capacity");

                    b.Property<int>("FeedingId");

                    b.Property<int>("TypeFuelId");

                    b.HasKey("FuelId");

                    b.HasIndex("FeedingId");

                    b.HasIndex("TypeFuelId");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("CompareMotos.Models.Ignition", b =>
                {
                    b.Property<int>("IgnitionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("IgnitionId");

                    b.ToTable("Ignition");
                });

            modelBuilder.Entity("CompareMotos.Models.ModelMotorcycle", b =>
                {
                    b.Property<int>("ModelMotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ModelMotorcycleId");

                    b.ToTable("ModelMotorcycle");
                });

            modelBuilder.Entity("CompareMotos.Models.Motorcycle", b =>
                {
                    b.Property<int>("MotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrakeId");

                    b.Property<int>("BrandId");

                    b.Property<int>("DimensionsId");

                    b.Property<int>("ElectricId");

                    b.Property<int>("EngineId");

                    b.Property<int>("FuelId");

                    b.Property<int>("ModelMotorcycleId");

                    b.Property<double>("Price");

                    b.Property<int>("TransmissionId");

                    b.Property<int>("TypeMotorcycleId");

                    b.Property<int>("Year");

                    b.HasKey("MotorcycleId");

                    b.HasIndex("BrakeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("ElectricId");

                    b.HasIndex("EngineId");

                    b.HasIndex("FuelId");

                    b.HasIndex("ModelMotorcycleId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("TypeMotorcycleId");

                    b.ToTable("Motorcycle");
                });

            modelBuilder.Entity("CompareMotos.Models.Start", b =>
                {
                    b.Property<int>("StartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("StartId");

                    b.ToTable("Start");
                });

            modelBuilder.Entity("CompareMotos.Models.TimeCycle", b =>
                {
                    b.Property<int>("TimeCycleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name");

                    b.HasKey("TimeCycleId");

                    b.ToTable("TimeCycle");
                });

            modelBuilder.Entity("CompareMotos.Models.Transmission", b =>
                {
                    b.Property<int>("TransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountGearId");

                    b.Property<int>("TypeTransmissionId");

                    b.HasKey("TransmissionId");

                    b.HasIndex("AmountGearId");

                    b.HasIndex("TypeTransmissionId");

                    b.ToTable("Transmission");
                });

            modelBuilder.Entity("CompareMotos.Models.TypeFuel", b =>
                {
                    b.Property<int>("TypeFuelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("TypeFuelId");

                    b.ToTable("TypeFuel");
                });

            modelBuilder.Entity("CompareMotos.Models.TypeMotorcycle", b =>
                {
                    b.Property<int>("TypeMotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("TypeMotorcycleId");

                    b.ToTable("TypeMotorcycle");
                });

            modelBuilder.Entity("CompareMotos.Models.TypeTransmission", b =>
                {
                    b.Property<int>("TypeTransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("TypeTransmissionId");

                    b.ToTable("TypeTransmission");
                });

            modelBuilder.Entity("CompareMotos.Models.Brake", b =>
                {
                    b.HasOne("CompareMotos.Models.BackBrake", "BackBrake")
                        .WithMany()
                        .HasForeignKey("BackBrakeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.FrontBrake", "FrontBrake")
                        .WithMany()
                        .HasForeignKey("FrontBrakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompareMotos.Models.Electric", b =>
                {
                    b.HasOne("CompareMotos.Models.Battery", "Battery")
                        .WithMany()
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Ignition", "Ignition")
                        .WithMany()
                        .HasForeignKey("IgnitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Start", "Start")
                        .WithMany()
                        .HasForeignKey("StartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompareMotos.Models.Engine", b =>
                {
                    b.HasOne("CompareMotos.Models.Cooling", "Cooling")
                        .WithMany()
                        .HasForeignKey("CoolingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Cylinder", "Cylinder")
                        .WithMany()
                        .HasForeignKey("CylinderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Displacement", "Displacement")
                        .WithMany()
                        .HasForeignKey("DisplacementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.TimeCycle", "TimeCycle")
                        .WithMany()
                        .HasForeignKey("TimeCycleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompareMotos.Models.Fuel", b =>
                {
                    b.HasOne("CompareMotos.Models.Feeding", "Feeding")
                        .WithMany()
                        .HasForeignKey("FeedingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.TypeFuel", "TypeFuel")
                        .WithMany()
                        .HasForeignKey("TypeFuelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompareMotos.Models.Motorcycle", b =>
                {
                    b.HasOne("CompareMotos.Models.Brake", "Brake")
                        .WithMany()
                        .HasForeignKey("BrakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Dimensions", "Dimensions")
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Electric", "Electric")
                        .WithMany()
                        .HasForeignKey("ElectricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.ModelMotorcycle", "ModelMotorcycle")
                        .WithMany()
                        .HasForeignKey("ModelMotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.TypeMotorcycle", "TypeMotorcycle")
                        .WithMany()
                        .HasForeignKey("TypeMotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompareMotos.Models.Transmission", b =>
                {
                    b.HasOne("CompareMotos.Models.AmountGear", "AmountGear")
                        .WithMany()
                        .HasForeignKey("AmountGearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompareMotos.Models.TypeTransmission", "TypeTransmission")
                        .WithMany()
                        .HasForeignKey("TypeTransmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
